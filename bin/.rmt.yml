# Usage:
# cd bin
# ./RMT release

# Default settings
_default:

    # Use git as version control
    vcs: git

    # What is required to build a version
    prerequisites:
      # Is the working copy clean?
      - working-copy-check

      # Do all tests succeeed?
      - tests-check:
          command: ./phpunit -c ../app

    # How should the next version be determined?
    # Since this only counts for non official release (for example to deploy to a test environment)
    # The rules are a little different, The version is created by a custom version persister
    # which actually 'tricks' RMT. It does not generate simple version but returns the current commit
    # hash as version
    version-generator: simple
    version-persister: "rmt-scripts/JanusVersionPersister.php"

    # What has to be done after creating a release?
    post-release-actions:
      # Create a selfcontaining archive of the project including all vendor code and excluding test/dev code.
      - rmt-scripts/BuildArchiveAction.php

# Settings for the branch official releases are created from
master:
    # What should be done before creating a release?
    pre-release-actions:
        # Update a CHANGELOG file before the release
        changelog-update:
            file: CHANGES
            format: semantic

        # Commit all files of the working copy (only use it with the working-copy-check prerequisite)
        vcs-commit: ~

    # How should the next version be determined?
    # Generate a Semantic version based on the latest known version (git tag) and create a new tag
    version-generator: semantic
    version-persister: vcs-tag

    # What has to be done after creating a release?
    post-release-actions:
        # Publish the changes (commits and tags)
        vcs-publish: ~